Python is a high-level, interpreted programming language known for its simplicity and readability. It was created by Guido van Rossum and first released in 1991. Python's design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code compared to languages such as C++ or Java.

KEY FEATURES:

Simple and Readable Syntax: Python's syntax is clean and easy to understand, making it accessible for beginners.

Interpreted Language: Python is executed line by line, which makes debugging easier.

Dynamically Typed: You don't need to declare variable types explicitly.

Extensive Standard Library: Python has a rich standard library that supports many common programming tasks.

Cross-Platform: Python runs on various operating systems like Windows, macOS, and Linux.

Community Support: Python has a large and active community, which means a wealth of third-party modules and resources.

USE CASES:

Web Development: Frameworks like Django and Flask.

Data Science and Machine Learning: Libraries like Pandas, NumPy, and scikit-learn.

Automation and Scripting: Automating repetitive tasks.

Software Development: Backend development, prototyping.

Scientific Computing: Tools like SciPy and Matplotlib.

INSTALLING PYTHON:
Open Terminal.

Update package list: sudo apt-get update

Install Python: sudo apt-get install python3

Verifying Installation:
Open Terminal.

Type python3 --version to check the installed Python version.

Setting Up a Virtual Environment:
Install venv if not already installed: sudo apt-get install python3-venv

Create a virtual environment: python3 -m venv myenv

Activate the virtual environment:
source myenv/bin/activate

PYTHON SYNTAX AND SEMANTICS:
print("Hello, World!")

EXPLANATION:

print is a built-in function used to output text to the console.

"Hello, World!" is a string, which is a sequence of characters enclosed in quotes.

DATA TYPES AND VARIABLES:

int: Integer values (e.g., 42).
float: Floating-point numbers (e.g., 3.14).
str: String of characters (e.g., "Hello").
bool: Boolean values (True or False).
list: Ordered sequence of values (e.g., [1, 2, 3]).
tuple: Ordered, immutable sequence of values (e.g., (1, 2, 3)).
dict: Key-value pairs (e.g., {"name": "John", "age": 30}).
set: Unordered collection of unique values (e.g., {1, 2, 3}).

EXAMPLE SCRIPT:
# Integer
age = 25
print(f"Age: {age}, Type: {type(age)}")

# Float
pi = 3.14159
print(f"Pi: {pi}, Type: {type(pi)}")

# String
name = "Alice"
print(f"Name: {name}, Type: {type(name)}")

# Boolean
is_student = True
print(f"Is student: {is_student}, Type: {type(is_student)}")

# List
fruits = ["apple", "banana", "cherry"]
print(f"Fruits: {fruits}, Type: {type(fruits)}")

# Tuple
coordinates = (10.0, 20.0)
print(f"Coordinates: {coordinates}, Type: {type(coordinates)}")

# Dictionary
person = {"name": "Bob", "age": 30}
print(f"Person: {person}, Type: {type(person)}")

# Set
unique_numbers = {1, 2, 3, 4, 5}
print(f"Unique numbers: {unique_numbers}, Type: {type(unique_numbers)}")


CONTROL STRUCTURES:

Conditional Statements:
Conditional statements allow you to execute code based on certain conditions.

Example: if-else Statement:

age = 18
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")

Loops:
Loops are used to iterate over a sequence (like a list, tuple, dictionary, set, or string) or to repeat a block of code multiple times.

Example: for Loop:

fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

Functions in Python
Functions are reusable blocks of code that perform a specific task. They help in making the code modular, easier to understand, and maintain.

Example Function:

def add(a, b):
    return a + b

# Calling the function
result = add(3, 5)
print(f"The sum is: {result}")

Lists and Dictionaries

Differences:
List: Ordered collection of elements, accessed by index. Mutable.

Dictionary: Unordered collection of key-value pairs, accessed by key. Mutable.

Example Script:

# List
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(f"Numbers: {numbers}")

# Dictionary
person = {"name": "Alice", "age": 25}
person["city"] = "New York"
print(f"Person: {person}")

# Accessing elements
print(f"First number: {numbers[0]}")
print(f"Person's name: {person['name']}")

Exception Handling
Exception Handling is a way to handle errors gracefully during the execution of a program. It allows the program to continue running or terminate gracefully.

Example:
try:
    x = int(input("Enter a number: "))
    result = 10 / x
    print(f"Result: {result}")
except ValueError:
    print("Invalid input. Please enter a number.")
except ZeroDivisionError:
    print("Cannot divide by zero.")
finally:
    print("Execution complete.")

Modules and Packages:
Modules are files containing Python code (functions, classes, variables) that can be imported and used in other Python scripts.

Packages are collections of modules in directories that provide a hierarchical structure.

Example:
import math

# Using the math module
num = 16
sqrt = math.sqrt(num)
print(f"The square root of {num} is {sqrt}")

File I/O
Reading from a File:

with open("example.txt", "r") as file:
    content = file.read()
    print(content)
Writing to a File:

lines = ["First line", "Second line", "Third line"]

with open("output.txt", "w") as file:
    for line in lines:
        file.write(line + "\n")

